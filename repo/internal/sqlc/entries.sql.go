// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: entries.sql

package sqlc

import (
	"context"
)

const createEntry = `-- name: CreateEntry :execlastid
INSERT INTO entries (
  wallet_id,
  amount
) VALUES (
  ?, ?
)
`

type CreateEntryParams struct {
	WalletID int64 `json:"wallet_id"`
	Amount   int64 `json:"amount"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createEntry, arg.WalletID, arg.Amount)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const getEntry = `-- name: GetEntry :one
SELECT id, wallet_id, amount, created_at FROM entries
WHERE id = ? LIMIT 1
`

func (q *Queries) GetEntry(ctx context.Context, id int64) (*Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntry, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.WalletID,
		&i.Amount,
		&i.CreatedAt,
	)
	return &i, err
}
